package euler.upto20;

import euler.common.DivisorSequence;

import java.util.List;

/**
 * Problem12
 * <pre>
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *    1: 1
 *    3: 1,3
 *    6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 * </pre>
 * i=12375th triangle #=76576500 # divisors=576 wall time=6953 ms
 * User: MOD
 * Date: Nov 25, 2008
 * Time: 10:25:38 AM
 */
public class Problem12 {
    private static final int MIN_DIVISORS = 500;
    private static final long MAX_RANGE = 1000000L;

    public static void main(String[] args) {
        long begTime = System.currentTimeMillis();
        for (long i = 1; i <= MAX_RANGE; ++i) {

            DivisorSequence sequence = new DivisorSequence();

            long n = triangle(i);
            List<Long> divisors = sequence.calculate(n);
            System.out.println("i=" + i + " n=" + n + " # divisors=" + divisors.size());

            if (divisors.size() >= MIN_DIVISORS) {
                long endTime = System.currentTimeMillis();
                System.out.println("wall time=" + (endTime - begTime) + " ms");
                break;
            }
        }
    }

    public static long triangle(long n) {
        long sum = 0L;

        for (int i = 1; i <= n; ++i) {
            sum += (long) i;
        }

        return sum;
    }
}
