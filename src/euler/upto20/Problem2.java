package euler.upto20;

import euler.common.Fibonacci;

/**
 * EulerProblem2
 * <pre>
 * Each new term in the Fibonacci sequence is generated by adding the
 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * Find the sum of all the even-valued terms in the sequence which do not
 * exceed four million.  (IMPORTANT: The term does not exceed the max, but the
 * sum can.)
 * </pre>
 * User: MOD
 * Date: Oct 11, 2008
 * Time: 2:32:33 PM
 * @link http://projecteuler.net/index.php?section=problems&id=2
 */
public class Problem2 {
    private static final long DEFAULT_MAX_TERM = 4000000L;
    private static final long DEFAULT_DIVISOR = 2L;

    public static void main(String[] args) {
        long maxTerm = ((args.length > 0) ? Long.valueOf(args[0]) : DEFAULT_MAX_TERM);
        long divisor = ((args.length > 1) ? Long.valueOf(args[1]) : DEFAULT_DIVISOR);

        System.out.println("max term: " + maxTerm);
        System.out.println("divisor: " + divisor);

        Problem2 euler2 = new Problem2();

        System.out.println("sum: " + euler2.calcFibonacciSum(maxTerm, divisor));
    }

    public long calcFibonacciSum(long maxTerm, long divisor) {
        long sum = 0L;
        Fibonacci sequence = new Fibonacci();
        int n = 0;
        boolean finished = false;
        while (!finished) {
            long term = sequence.getNext(n++);
            if ((term % divisor) == 0) {
                if (term > maxTerm) {
                    break;
                } else {
                    sum += term;
                }
            }
        }

        return sum;
    }
}

      
